import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
import math as m

characters = np.loadtxt('Char.txt',dtype=str)
G = nx.Graph()
G.add_nodes_from(characters)
h = nx.read_edgelist('MCU_edges.txt',create_using=nx.Graph(),nodetype=str)
G.add_edges_from(h.edges)

freq = nx.degree_histogram(G) #this will give the list of frequency of each degree.
degrees = range(len(freq)) # this will give numbers from 0 to highest degree.
p = []
a = 1
deg = 0
avg = 0
maximum = 0
loc = 0
print(len(G.edges()))
#average-degree calculation
for i in G.nodes():
    deg+=G.degree[i]
    if(G.degree[i]>maximum):
        maximum = G.degree[i]
        loc = i
avg = deg/len(G.degree)

for i in range(len(freq)):
    a = freq[i]/6486
    p.append(a)
    
print("Average Degree :",avg)
print("Maximum Degree :",maximum,"which corresponds to node :",loc)

#degree distribution plot
plt.plot(degrees,p,'.')
plt.xlabel('Degree(k)')
plt.ylabel('p(k)')
plt.title('Degree Distribution')
plt.grid(True)
plt.savefig('deg_dist.png')
plt.show()

plt.loglog(degrees,p,'.')
plt.xlabel('Degree(k)')
plt.ylabel('p(k)')
plt.title('Degree Distribution (loglog scale)')
plt.grid(True)
plt.savefig('deg_dist_log.png')
plt.show()

plt.semilogx(degrees,p,'b.')
plt.xlabel('Degree(k)')
plt.ylabel('p(k)')
plt.title('Degree Distribution (semilog x axis)')
plt.grid(True)
plt.savefig('deg_dist_semilog.png')
plt.show()

plt.semilogy(degrees,p,'.')
plt.xlabel('Degree(k)')
plt.ylabel('p(k)')
plt.title('Degree Distribution (semilog y axis)')
plt.grid(True)
plt.savefig('deg_dist_semilog1.png')
plt.show()
